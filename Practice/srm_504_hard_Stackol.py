def possible(a,b):
  if a.count('B') == 0:
    return b == ''
  if a.count('B') == b.count('A'):
    return b[0] == 'A'
  elif a.count('B') == b.count('A') + 1:
    return a[0] == 'B'
  return False

import copy
class Stackol:
  def countPrograms(self,fr, k):
    mod = 1000**3 + 7
    out = "".join(fr) 
    n = len(out)
    t_cnt = [[0]*(n+1) for _ in range(n)]
    def ab_gen(li):
      z = [0,0]
      for e in li:
        z[ord(e)-ord('A')] += 1
        yield tuple(z)
      yield tuple(z)
    t_ab = list(ab_gen(out))
    As = [i for i in range(n) if out[i]=='A']
    Bs = [i for i in range(n) if out[i]=='B']
    out += '|'
    import pdb
    for i in range(n):
      for s in range(i,n):
        B_in_alpha = t_ab[s][1] #alpha : [i,s]
        if i > 0:
          B_in_alpha -= t_ab[i-1][1]
        if B_in_alpha == 0:
          t_cnt[i][s] += 1
          t_cnt[i][s+1] -= 1
          continue
        if out[i] == 'B' and out[s+1] == 'A': #both ends are ok
          least_A,too_much_A = B_in_alpha-1,B_in_alpha+1
        elif out[i] == 'B' and out[s+1] != 'A': #beta end only
          least_A,too_much_A = B_in_alpha-1,B_in_alpha
        elif out[i] == 'A' and out[s+1] == 'A': #alpha end only
          least_A,too_much_A = B_in_alpha,B_in_alpha+1
        else: #impossible
          continue
        # least_A <= A_in_beta < too_much_A
        if least_A == 0:
          near = s
        elif len(As) > t_ab[s][0] + least_A - 1:
          near = As[t_ab[s][0] + least_A - 1]
        else:
          continue
        if len(As) > t_ab[s][0] + too_much_A - 1:
          far = As[t_ab[s][0] + too_much_A - 1]
        else:
          far = n 
        t_cnt[i][near] += 1
        t_cnt[i][far] -= 1
      for s in range(1,n):
        t_cnt[i][s] += t_cnt[i][s-1]
        t_cnt[i][s] %= mod
    t_dp = [0] * n
    ans = 0
    for _ in range(k):
      next = copy.deepcopy(t_dp)
      for i in range(n):
        for j in range(i,n): #[i,j]
          if i==0:
            next[j] += t_cnt[i][j]
          else:
            next[j] += (t_dp[i-1] * t_cnt[i][j])% mod
      ans += next[-1]
      t_dp = next
    print(ans)
    return ans


'''
print(possible('B',''))
print(possible('B','A'))
print(possible('B','B'))
print(possible('AAAAABAAAAAA',''))
print(possible('BA','AB'))
'''
#Stackol().countPrograms(["ABABAB"],1)
#Stackol().countPrograms(["ABAB"],3)
#Stackol().countPrograms(["A"],2)
#Stackol().countPrograms(["AAAA","BABA"],1)
#Stackol().countPrograms(["AB"],2)
#Stackol().countPrograms(["AAABABABAABA","AA","BBAB"],3)
#Stackol().countPrograms(["AAAAAAAAAAAA","B"],4)

Stackol().countPrograms(["BBAAAAABBAAABABAABBBAABABABAABBBAABAABBAABABABAAAA", "BAAABAAABABBABABBABBBBAAABBABBBABBAABBBAABBBABBBAA", "ABBBBAAABBBAABAABAABBAAABBBBBAABBABABBBBBAABBABBBB", "BBBABABBABBABABAABBBABABBBBBBBABBAABBABAAABABABBAA", "ABBBBBBAAAABAABAABABAAABBAAAABABAABBBAAAAABABBABAB", "AABABABABBAAABAABAABBABBBABBBBAAAAABAABABAABBBAAAB", "ABAAABABAAABAAAABBBBBBAABABBABABABABAABAAAAABBBABA", "ABAABABAAAAABABAABABBABAAAAAABBABAAAABAAABBBABBBAA", "BAAAAAAAABABBAAABBBBBAAAAABABBABABBBBABBBBABBABAAA", "BABAABBAAABAABBABAABAAABBAAABBBAABBABAABABBAAABABA", "BBABBBBAAAAAAABAAABBBBBABAABBABBBAABBBABAAABBAABBA", "AAABBBABAAAABAABBBABBBABBAAABBBBABBAAAAABBBAAABBAA", "ABBABAABBBABAAAABBABBABAABAAAAABAAABAAAABBABAABABA", "BBABBAABAABABABAABBABBABABABBABBBABABABAAAAABBABBA", "BAAAAAAABABBAAAABABABBABBAABBABBAAABBAAABAAAABAABA", "BBAABABBBAAAABAAABABAAABAAABABABBBAABBABBBBBAAAABA", "BABBAAAAAAAAAABAAABBBAAAAABBBBBABABABBBAABABBABABA", "BAABBAABBABBBBAABBBBBABABABAABBBABAABBBBBABAAABBAB", "AABBAAABBABAABBBBAABBBABAAABAABABABABABABBBABABABB", "BABBAAAAAABBAABABAAABAABAABBAAABAAAABBBBBAAAAAAAAA", "BBBBABBABABABABBBBBBBBBBBAAAABAABABABAAABAAABAAABA", "AAAAABABAAABAABBBAAAAAAAAABAABABBABBBABAABAABBAAAA", "AAABBBBBAABBAABBABBBBBAAABBBABBABBAAAAAAABABBBBAAA", "BAABBABABBAAABAAABBABBAAABBABABBAABAAABABBBBABABAA", "ABBBBBBABBBABABAABBABABAABBBBABABBBABBBBABABBBABAB", "AAABBBBBABBBABAABABAABABAABAABABBBABBAABBBABAAABBA", "BABBBBBAABBBAABAABBABAABABAAABABBBBBAABBABBAAAABBA", "BBAAAAABBBBBABBABAABAAAABBBABBAABAAABABABAABABABBA", "BAABBAAABBBABBABBABBBABABBBABBABBAAABBABBBABABAABB", "BAABABBBAAABBBABAAAABABBBBBAABBAABABBAAABBABAAABAB", "AABBABBAABBAAABBAABBBAAABBAAAABAAAABBBABAABBBBABBA", "BAAABAAAABABBABBAABABABBBAABAABAAABBAAABBBBBBABAAB", "BBBAAABBBBBBABAAABABBBAAAAAAAAAAAAABBABABBAABBAAAB", "BAAABBBBAAABBAAABAABBABBBABAABABBBAABABAAABAAABABA", "AAAAAABABAAABBABABBAABABABBBAABBABBABBBAAAAAABBABB", "AAAABAABBAAAABAAABABBBABABBBABAABBBABABAABABABABAB", "BBBABBBABAABBAABABAABABBAAAAABBBBABBABABBABBAABABA", "ABAABBBBAAABBABABAABABBBAABBAAABAAABABABBAABAAABAA", "BABAAAAAAABBAAABAABABAAABBAABBAABBABBABBBAAABAABAB", "AABABBAABBBAAABBBABBBAAAABBAAABBBBABAABAABABABABBA", "AAAAAABAABAAABBABBBAAAAABAAAABAABBABBBAABBAABBABBA", "AABABAABABAAABABAABABABABBAAAAAABAABBBBAAABABAABBB", "AABBBAAAAAAABBBBABBAAAAABABBBBAAAABABAAAAABABAABBB", "BBBBAABBAAAAABBBAAAAABBABAAABBBAAABAABABBBBBBBBBAA", "ABAAABBBBBBABBBAABAABAAAAAABBABBAABAAAAABAABBBBAAB", "BBAABBBABBABBAAAAABBABBBABABBAAAAABABAAAABBBABBABB", "AAAABBAAABAAAAAAABABAABBBBAABAABBAABABBBAABBAABABA", "BABABBABABABABBBAABBABBABABABAABBAAABBBABBAABAAAAA", "BBABAABABBABBABABABBBAAAAABAAAABABABBAABABAABBBBAB", "BBAAAAAABBABAAABBABAABBBAABAABABABBBABAAABBBBBBAAA"],10)
